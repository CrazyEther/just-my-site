Министерство науки и высшего образования Российской Федерации

Федеральное государственное автономное образовательное учреждение высшего образования «Южно-Уральский государственный университет»

(Национальный исследовательский университет)

Высшая школа электроники и компьютерных наук

Кафедра ИКТ

ОТЧЕТ

по производственной практике

Выполнил:
Студент группы КЭ-311
________________Шилов П.A.
«___»____________2024 г.

Принял:
Руководитель практики от предприятия
_________________Волков Е.А.
«___»____________2024 г.

Челябинск
2024

Оглавление
ВВЕДЕНИЕ	3
1.1 Краткое описание Django и его применения	3
1.2 Описание проекта JustAnime	3
1.3 Обзор основных компонентов системы	4

2. ОСНОВНЫЕ КОМПОНЕНТЫ JustAnime	5
2.1 Модели данных (Anime, UserAnimeProgress, Comment)	5
2.2 Представления (Views)	6
2.3 Формы (Forms)	7

3. АНАЛИЗ РЕАЛИЗАЦИИ	8
3.1 Модели (анализ models.py)	8
3.2 Представления (анализ views.py)	10
3.3 Шаблоны (анализ HTML/CSS)	12
3.4 Маршрутизация (urls.py)	14

4. ЗАКЛЮЧЕНИЕ	16
4.1 Преимущества реализации	16
4.2 Рекомендации по развитию	17

ВВЕДЕНИЕ

1.1 Краткое описание Django и его применения
Django - это высокоуровневый веб-фреймворк Python, созданный для быстрого и легкого создания веб-приложений. Он известен своей простотой использования, надежностью и масштабируемостью. Django используется для создания широкого спектра веб-приложений, от простых блогов до сложных корпоративных систем.

1.2 Описание проекта JustAnime
Проект JustAnime представляет собой веб-приложение для управления информацией об аниме. Он позволяет пользователям просматривать список аниме, добавлять комментарии, отслеживать прогресс просмотра и управлять своим профилем.

1.3 Обзор основных компонентов системы
Проект состоит из следующих основных компонентов:
- Модели данных для хранения информации об аниме, пользователях и комментариях
- Представления для обработки запросов и генерации ответов
- Формы для валидации и обработки данных от пользователей
- Шаблоны для отображения информации на веб-страницах
- Маршрутизация для связывания URL с соответствующими представлениями

2. ОСНОВНЫЕ КОМПОНЕНТЫ JustAnime

2.1 Модели данных (Anime, UserAnimeProgress, Comment)
Модели данных описывают структуру хранения информации в базе данных. В проекте JustAnime используются следующие модели:

```python
class Anime(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    image = models.ImageField(upload_to='anime_images/')
    year = models.IntegerField(null=True, blank=True)
    genres = models.ManyToManyField('Genre', related_name='animes')
    slug = models.SlugField(unique=True)
    episodes_count = models.PositiveIntegerField(default=12)
```

Модель `Anime` содержит основную информацию об аниме, включая название, описание, изображение, год выпуска, жанры, URL-слаг и количество эпизодов. Используется для хранения и отображения данных о каждом аниме на сайте. Поле `genres` реализовано как связь многие-ко-многим с моделью `Genre`, что позволяет одному аниме принадлежать к нескольким жанрам. Поле `slug` обеспечивает уникальный URL для каждой страницы аниме, а `episodes_count` хранит общее количество эпизодов.

```python
class UserAnimeProgress(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    anime = models.ForeignKey(Anime, on_delete=models.CASCADE)
    watched_episodes = models.PositiveIntegerField(default=0)
    current_episode = models.PositiveIntegerField(default=0)
    STATUS_CHOICES = [
        ('watching', 'Смотрю'),
        ('completed', 'Просмотрено'),
        ('planned', 'В планах'),
    ]
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='watching')
    class Meta:
        unique_together = ('user', 'anime')
```

Модель `UserAnimeProgress` предназначена для отслеживания индивидуального прогресса пользователя по каждому аниме. Она хранит количество просмотренных эпизодов, текущий эпизод и статус просмотра (смотрю, просмотрено, в планах). Связь с пользователем и аниме реализована через внешние ключи. Ограничение `unique_together` гарантирует, что для каждой пары пользователь-аниме существует только одна запись прогресса.

```python
class Comment(models.Model):
    anime = models.ForeignKey('Anime', on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
```

Модель `Comment` реализует систему комментариев к аниме. Каждый комментарий связан с конкретным аниме и пользователем, содержит текст и дату создания. Это позволяет пользователям обсуждать аниме непосредственно на сайте.

Таким образом, модели проекта JustAnime обеспечивают хранение всей необходимой информации для работы сайта: данные об аниме, прогресс пользователей и комментарии. Все модели используют стандартные механизмы Django ORM, что облегчает работу с базой данных и интеграцию с другими компонентами системы.

2.2 Представления (Views)

Представления (views) в Django отвечают за обработку запросов пользователей, получение данных из моделей и передачу их в шаблоны для отображения. В проекте JustAnime используются следующие основные представления:

- `anime_list` — отображает список всех аниме, поддерживает фильтрацию по жанрам и годам.
- `anime_detail` — выводит подробную информацию об аниме, комментарии и прогресс пользователя.
- `update_progress` — позволяет пользователю обновлять свой прогресс просмотра выбранного аниме.
- Дополнительно реализованы представления для регистрации, входа, выхода, профиля пользователя и добавления комментариев.

Каждое представление реализовано как отдельная функция в файле `views.py` и взаимодействует с моделями и формами для обработки данных.

2.3 Формы (Forms)
Формы в Django используются для валидации и обработки данных, отправляемых пользователями через веб-интерфейс. Они позволяют легко создавать и обрабатывать HTML-формы, обеспечивая при этом валидацию данных на стороне сервера.

В проекте JustAnime формы используются для следующих целей:

- Вход и регистрация пользователей
- Обновление профиля пользователя
- Добавление и редактирование комментариев
- Обновление прогресса просмотра аниме

Формы определяются как классы в файле `forms.py` и связаны с соответствующими моделями. Например, форма для добавления комментария может выглядеть так:

```python
class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ['text']
        widgets = {
            'text': forms.Textarea(attrs={'rows': 4, 'placeholder': 'Введите ваш комментарий'}),
        }
        labels = {
            'text': 'Комментарий',
        }
```

После рассмотрения основных компонентов системы, перейдём к анализу их реализации в проекте.

3. АНАЛИЗ РЕАЛИЗАЦИИ

3.1 Модели (анализ models.py)
Модели в Django определяют структуру данных и правила их обработки. Они описывают, какие данные будут храниться в базе данных, и обеспечивают интерфейс для их манипуляции. В проекте JustAnime модели определены в файле `models.py`.

Рассмотрим основные модели проекта:

```python
class Anime(models.Model):
    title = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    image = models.ImageField(upload_to='anime_images/')
    year = models.IntegerField(null=True, blank=True)
    genres = models.ManyToManyField('Genre', related_name='animes')
    slug = models.SlugField(unique=True)
    episodes_count = models.PositiveIntegerField(default=12)
```
- `Anime`: модель, представляющая аниме. Содержит поля для названия, описания, изображения, года выпуска, жанров, URL-слага и количества эпизодов. Связано с моделью `Genre` через отношение многие-ко-многим.

```python
class UserAnimeProgress(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    anime = models.ForeignKey(Anime, on_delete=models.CASCADE)
    watched_episodes = models.PositiveIntegerField(default=0)
    current_episode = models.PositiveIntegerField(default=0)
    STATUS_CHOICES = [
        ('watching', 'Смотрю'),
        ('completed', 'Просмотрено'),
        ('planned', 'В планах'),
    ]
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='watching')
    class Meta:
        unique_together = ('user', 'anime')
```
- `UserAnimeProgress`: модель, отслеживающая прогресс пользователя по аниме. Содержит поля для количества просмотренных эпизодов, текущего эпизода и статуса просмотра. Связана с моделями `User` и `Anime` через внешние ключи.

```python
class Comment(models.Model):
    anime = models.ForeignKey('Anime', on_delete=models.CASCADE, related_name='comments')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    text = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
```
- `Comment`: модель, представляющая комментарий к аниме. Содержит поля для связи с аниме и пользователем, текста комментария и даты его создания.

Модели используют стандартные типы полей Django, такие как `CharField`, `TextField`, `ImageField`, `IntegerField` и `ForeignKey`. Также используются дополнительные возможности Django, такие как `ManyToManyField` для реализации отношений многие-ко-многим и `SlugField` для создания уникальных слагов.

3.2 Представления (анализ views.py)
Представления в Django отвечают за обработку веб-запросов и возврат веб-ответов. Они получают данные из моделей, обрабатывают их (при необходимости) и передают в шаблоны для отображения. В проекте JustAnime представления реализованы в файле `views.py` и используют функции для обработки запросов.

Рассмотрим основные представления проекта:

```python
def anime_list(request):
    animes = Anime.objects.all()
    # ... фильтрация и сортировка аниме ...
    return render(request, 'anime/anime_list.html', { 'animes': animes, 'all_tags': all_genres, 'available_years': years })
```

Представление `anime_list` отвечает за отображение списка аниме. Оно извлекает все объекты аниме из базы данных и передает их в шаблон `anime_list.html`. Дополнительно могут передаваться жанры и годы выпуска для фильтрации аниме.

```python
@login_required
def update_progress(request, slug):
    anime = get_object_or_404(Anime, slug=slug)
    user = request.user
    # ... обновление прогресса просмотра ...
    return redirect('anime_detail', slug=anime.slug)
```

Представление `update_progress` обрабатывает обновление прогресса просмотра аниме пользователем. Доступно только авторизованным пользователям (декоратор `@login_required`). После обновления прогресса происходит перенаправление на страницу с детальной информацией об аниме.

```python
def anime_detail(request, slug):
    anime = get_object_or_404(Anime, slug=slug)
    # ... отображение детальной информации об аниме ...
    return render(request, 'anime/anime_detail.html', {'anime': anime, 'progress': progress, 'comments': comments, 'comment_form': CommentForm()})
```

Представление `anime_detail` отображает детальную информацию об аниме, включая комментарии пользователей и форму для добавления нового комментария. Информация извлекается на основе `slug` аниме, переданного в URL.

Таким образом, представления проекта JustAnime обеспечивают обработку основных бизнес-логик приложения: отображение списка аниме, обновление прогресса просмотра и отображение детальной информации об аниме. Они взаимодействуют с моделями для получения и изменения данных, а также с шаблонами для формирования HTML-страниц.

3.3 Шаблоны (анализ HTML/CSS)
Шаблоны в Django отвечают за отображение данных пользователю. Они содержат HTML-код с вкраплениями тегов шаблонов Django для динамического отображения данных. В проекте JustAnime шаблоны хранятся в директории `templates` и организованы по приложениям.

Рассмотрим основные шаблоны проекта:

- `base.html`: базовый шаблон, от которого наследуются все остальные шаблоны. Содержит общую разметку страницы, ссылки на стили и скрипты, а также блоки для вставки контента из дочерних шаблонов.

```html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}JustAnime{% endblock %}</title>
    <link rel="stylesheet" href="{% static 'css/styles.css' %}">
</head>
<body>
    <header>
        <h1>Добро пожаловать в JustAnime</h1>
        <nav>
            <ul>
                <li><a href="{% url 'anime_list' %}">Главная</a></li>
                {% if user.is_authenticated %}
                <li><a href="{% url 'profile' %}">Профиль</a></li>
                <li><a href="{% url 'logout' %}">Выход</a></li>
                {% else %}
                <li><a href="{% url 'login' %}">Вход</a></li>
                <li><a href="{% url 'signup' %}">Регистрация</a></li>
                {% endif %}
            </ul>
        </nav>
    </header>
    <main>
        {% block content %}{% endblock %}
    </main>
    <footer>
        <p>&copy; 2024 JustAnime. Все права защищены.</p>
    </footer>
</body>
</html>
```

- `anime_list.html`: шаблон для отображения списка аниме. Наследует от `base.html` и заполняет блоки `title` и `content`.

```html
{% extends 'base.html' %}

{% block title %}Список аниме{% endblock %}

{% block content %}
<h2>Список аниме</h2>
<div class="anime-list">
    {% for anime in animes %}
    <div class="anime-item">
        <h3><a href="{% url 'anime_detail' slug=anime.slug %}">{{ anime.title }}</a></h3>
        <p>Год: {{ anime.year }}</p>
        <p>Эпизодов: {{ anime.episodes_count }}</p>
        <p>Жанры: 
            {% for genre in anime.genres.all %}
            <a href="{% url 'genre_anime_list' slug=genre.slug %}">{{ genre.name }}</a>{% if not forloop.last %}, {% endif %}
            {% endfor %}
        </p>
    </div>
    {% endfor %}
</div>
{% endblock %}
```

- `anime_detail.html`: шаблон для отображения детальной информации об аниме. Также наследует от `base.html`.

```html
{% extends 'base.html' %}

{% block title %}{{ anime.title }} - JustAnime{% endblock %}

{% block content %}
<h2>{{ anime.title }}</h2>
<p>Год: {{ anime.year }}</p>
<p>Эпизодов: {{ anime.episodes_count }}</p>
<p>Жанры: 
    {% for genre in anime.genres.all %}
    <a href="{% url 'genre_anime_list' slug=genre.slug %}">{{ genre.name }}</a>{% if not forloop.last %}, {% endif %}
    {% endfor %}
</p>
<div class="anime-description">
    {{ anime.description|linebreaks }}
</div>
<h3>Комментарии</h3>
<div class="comments-section">
    {% for comment in comments %}
    <div class="comment">
        <p><strong>{{ comment.user.username }}</strong> ({{ comment.created_at|date:"d.m.Y H:i" }}):</p>
        <p>{{ comment.text }}</p>
    </div>
    {% empty %}
    <p>Нет комментариев.</p>
    {% endfor %}
</div>
<h3>Оставить комментарий</h3>
<form method="post" class="comment-form">
    {% csrf_token %}
    {{ comment_form.as_p }}
    <button type="submit">Отправить</button>
</form>
{% endblock %}
```

Шаблоны используют статические файлы (CSS, изображения) для оформления и улучшения пользовательского интерфейса. Структура шаблонов организована таким образом, чтобы обеспечить переиспользование кода и удобство в обслуживании.

3.4 Маршрутизация (urls.py)
Маршрутизация в Django отвечает за сопоставление URL-адресов с соответствующими представлениями. Она настраивается в файле `urls.py` каждого приложения. В проекте JustAnime маршрутизация организована следующим образом:

```python
from django.urls import path
from .views import anime_list, anime_detail, update_progress

urlpatterns = [
    path('', anime_list, name='anime_list'),
    path('anime/<slug:slug>/', anime_detail, name='anime_detail'),
    path('anime/<slug:slug>/update_progress/', update_progress, name='update_progress'),
]
```

- Путь `''` сопоставляется с представлением `anime_list` и отвечает за главную страницу со списком аниме.
- Путь `'anime/<slug:slug>/'` сопоставляется с представлением `anime_detail` и отвечает за страницы детальной информации об аниме. `slug` - это параметр URL, который передается в представление для извлечения соответствующего аниме.
- Путь `'anime/<slug:slug>/update_progress/'` сопоставляется с представлением `update_progress` и отвечает за обновление прогресса просмотра аниме пользователем.

Таким образом, маршрутизация в проекте JustAnime обеспечивает связь между URL-адресами и представлениями, что позволяет пользователям удобно взаимодействовать с приложением.

4. ЗАКЛЮЧЕНИЕ

4.1 Преимущества реализации
Проект JustAnime обладает рядом преимуществ, которые делают его удобным и привлекательным для пользователей:

- Удобный и интуитивно понятный интерфейс, позволяющий легко находить и просматривать аниме.
- Возможность отслеживания прогресса просмотра аниме и управления своим списком желаемого аниме.
- Система комментариев, позволяющая пользователям обсуждать аниме и делиться мнениями.
- Адаптивный дизайн, обеспечивающий корректное отображение на различных устройствах (ПК, планшеты, смартфоны).

4.2 Рекомендации по развитию
Несмотря на завершенность текущей реализации, проект имеет потенциал для дальнейшего развития и улучшения:

- Добавление системы рейтингов аниме, чтобы пользователи могли оценивать просмотренное аниме.
- Реализация функции рекомендаций аниме на основе предпочтений и истории просмотров пользователей.
- Расширение функционала профиля пользователя: добавление аватаров, биографии, настроек приватности.
- Оптимизация производительности приложения и базы данных для обработки большего количества пользователей и аниме.

В заключение, проект JustAnime представляет собой качественное и функциональное веб-приложение для поклонников аниме, реализованное с использованием современных технологий и подходов веб-разработки.
